' Gambas module file

Public Const DEFAULT_THEME As String = "gambas"

Public ColorKeys As String[] = ["Background", "Normal", "Keyword", "Datatype", "Function", "Operator", "Symbol", "Number", "String", "Comment", "Help", "Preprocessor", "Breakpoint", "Current", "Selection", "Highlight", "CurrentLine", "Error"]
Public ColorNames As String[] = [("Background"), ("Normal text"), ("Keywords"), ("Data types"), ("Subroutines"), ("Operators"), ("Symbols"), ("Numbers"), ("Strings"), ("Comments"), ("Help"), ("Preprocessor"), ("Breakpoints"), ("Current line"), ("Selection"), ("Highlighting"), ("Editing line"), ("Errors")]

Private $cDefault As Collection

Public Sub _init()

  $cDefault = ReadFile(DEFAULT_THEME)

End

Public Sub IsBackgroundStyle(sKey As String) As Boolean

  Return ["Background", "Selection", "CurrentLine", "Current", "Breakpoint", "Highlight"].Exist(sKey)

End

Public Function ReadSettings(hSettings As Settings, sParent As String, Optional bDefault As Boolean) As Collection

  Dim cColor As New Collection
  Dim sKey As String
  Dim sColor As String

  For Each sKey In ColorKeys
    If bDefault Then
      sColor = hSettings[sParent &/ sKey, $cDefault[sKey]]
    Else
      sColor = hSettings[sParent &/ sKey]
    Endif
    cColor[sKey] = sColor
  Next

  Return cColor

End

Public Sub WriteSettings(hSettings As Settings, sParent As String, cColor As Collection)

  Dim sKey As String

  For Each sKey In ColorKeys
    hSettings[sParent &/ sKey] = cColor[sKey]
  Next

End

Public Function ReadFile(sPath As String) As Collection

  Dim hSettings As Settings
  Dim sTemp As String

  If Left(sPath) <> "/" Then
    sPath = "theme" &/ sPath
    sTemp = Temp$()
    Copy sPath To sTemp
    sPath = sTemp
  Endif

  hSettings = New Settings(sPath)
  If sTemp Then Kill sTemp

  Return ReadSettings(hSettings, "Theme")

End

Public Sub WriteFile(sPath As String, cColor As Collection)

  Dim hSettings As Settings

  hSettings = New Settings(sPath)
  WriteSettings(hSettings, "Theme", cColor)

End

Public Sub Copy(cColor As Collection) As Collection

  Dim cNew As New Collection
  Dim sValue As String

  For Each sValue In cColor
    cNew[cColor.Key] = sValue
  Next

  Return cNew

End

' Public Sub InitEditor(hEditor As Editor, Optional bDesaturate As Boolean)
'
'   Dim iInd As Integer
'   Dim hStyle As New CStyle
'   Dim iStyle As Integer
'   Dim iCol As Integer
'
'   For iInd = 0 To ColorKeys.Max
'
'     hStyle.FromString(Settings["Highlight" &/ ColorKeys[iInd], $cDefault[ColorKeys[iInd]]])
'     iStyle = Object.GetProperty(Classes["Highlight"], ColorKeys[iInd])
'     With hEditor.Styles[iStyle]
'       iCol = hStyle.Background
'       If bDesaturate Then iCol = Color.Desaturate(iCol)
'       .Background = iCol
'       .Bold = hStyle.Bold
'       iCol = hStyle.Foreground
'       If bDesaturate Then iCol = Color.Desaturate(iCol)
'       .Foreground = iCol
'       .Italic = hStyle.Italic
'       .Underline = hStyle.Underline
'     End With
'
'   Next
'
' End

Public Sub GetColor(sStyle As String) As Integer

  Dim hStyle As New CStyle

  hStyle.FromString(Settings["Highlight" &/ sStyle, $cDefault[sStyle]])
  Return hStyle.Foreground

End

Public Sub InitControl(hControl As Control)

  hControl.Background = GetColor("Background")
  hControl.Foreground = GetColor("Normal")

End
