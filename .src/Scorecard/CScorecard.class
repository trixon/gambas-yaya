' Gambas class file

Event GameOver()
Event Undo()
Event Register()

Property Read Panel As Panel
Property Undoable As Boolean

' Property Rollable As Boolean

Private $aPlayers As CPlayer[]
Private $hCurrentPlayer As CPlayer
Private $aTempValues As Integer[]
Private $aLastValues As Integer[]
Private $hPlayerIndex As CCircularInt
Private $hLeftPanel As Panel
Private $hRightPanel As Panel
Private $hPanel As Panel
Private $hGrid As CScoreGrid
Private $hGameDef As CGameDef

Private $bRegisterable As Boolean
' Private $bRollable As Boolean
Private $bUndoable As Boolean
Private $iLastHoveredRow As Integer = -1

Private $iNumOfRolls As Integer

Public Sub _new(hContainer As Container)

  $hPanel = New Panel(hContainer) As "Panel"

  With $hPanel
    .Arrangement = Arrange.Horizontal
    .Expand = True
  End With

End

Private Function Panel_Read() As Panel

  Return $hPanel

End

Public Sub NewGame()

  Dim i As Integer

  $hGameDef = MGameLoader.GameDefs[MSettings.GameId]
  $bRegisterable = False
  $bUndoable = False
  $iNumOfRolls = 0

  $aPlayers = New CPlayer[MSettings.Players]
  For i = 0 To $aPlayers.Max
    $aPlayers[i] = New CPlayer
    $aPlayers[i].NewGame($hGameDef)
  Next

  $hPlayerIndex = New CCircularInt(0, MSettings.Players - 1)
  $hCurrentPlayer = $aPlayers[0]

  GridInit()
  Settings()

End

Private Sub ActivateNextPlayer()

  $hCurrentPlayer = $aPlayers[$hPlayerIndex.Inc()]
  $iNumOfRolls = 0

End

Private Sub ActivatePreviousPlayer()

  $hCurrentPlayer = $aPlayers[$hPlayerIndex.Dec()]
  $iNumOfRolls = 0

End

Public Sub Settings()

  Settings.Reload()
  If Not IsNull($hGrid) Then
    With $hGrid
      .MaxCol = MSettings.ShowMaxCol
      .TopCol = MSettings.ShowTopCol
      .ApplyLayout()
      .ShowTextAsSymbols(MSettings.ShowSymbols)
      .RecalcWidth()
    End With
  Endif

End

Private Sub GridInit()

  Dim iMaxCol As Integer = MSettings.Players + 2
  Dim iMaxRow As Integer = $hGameDef.Rows.Count - 1

  Try $hLeftPanel.Delete
  Try $hGrid.Delete
  Try $hRightPanel.Delete

  $hLeftPanel = New Panel($hPanel)
  $hGrid = New CScoreGrid($hPanel, $hGameDef) As "Grid"
  $hRightPanel = New Panel($hPanel)

  $hLeftPanel.Expand = True
  $hRightPanel.Expand = True

End

Public Sub Grid_Click()

  Dim hGameRow As CGameRow
  Dim hCell As _GridView_Cell = $hGrid.Current

  Dim iRow As Integer = $hGrid.Row
  Dim iCol As Integer = $hGrid.Column

  Debug Subst$("Row &1, Col &2", iRow, iCol)
  If $bUndoable And iRow = 0 And iCol = 0 Then
    Undo()
  Endif

  If $bRegisterable And iCol = $hPlayerIndex.Value + 3 Then
    hGameRow = $hGameDef.Rows[iRow]

    If hGameRow.IsPlayable And $hCurrentPlayer.Playable[iRow] Then
      Debug Subst$("hGameRow.Text &1, $aTempValues[iRow] &2", hGameRow.Text, $aTempValues[iRow])
      Register(iRow)
    Endif
  Endif

End

Public Sub Grid_Leave()

  $hGrid.ResetLayoutByColumn(0)
  $hGrid.ResetLayoutByColumn($hPlayerIndex.Value + 3)
  $iLastHoveredRow = -1

End

Public Sub Grid_MouseMove()

  Dim iRow As Integer = $hGrid.RowAt(Mouse.Y)

  If iRow <> $iLastHoveredRow And iRow > 0 And If iRow < $hGameDef.Rows.Count Then
    $hGrid.HoverRow(iRow, $hPlayerIndex.Value + 3, $hCurrentPlayer.Playable[iRow])
    $iLastHoveredRow = iRow
  Endif

End

Private Function GenerateRollsIndicator() As String

  Return Subst("&1 (&2/&3)", $iNumOfRolls, $hCurrentPlayer.Rolls, $hGameDef.Rolls)

End

Public Sub RollFinished(aValues As Integer[])

  Inc $iNumOfRolls
  $hCurrentPlayer.Rolls = $hCurrentPlayer.Rolls + 1
  $hGrid.UpdateRolls($hPlayerIndex.Value, GenerateRollsIndicator())

  $aTempValues = CalculatePossibleScores(aValues)
  $hGrid.TempPlayer = $hCurrentPlayer
  $hGrid.TempPlayerIndex = $hPlayerIndex
  $hGrid.TempValues = $aTempValues
  $hGrid.Indicators = MSettings.ShowIndicators
  $bRegisterable = True

End

Private Function CalculatePossibleScores(Values As Integer[]) As Integer[]

  Dim aScores As New Integer[$hGameDef.Rows.Length]
  Dim hGameRow As CGameRow
  Dim iRow As Integer
  Dim iScore As Integer
  Dim iValue As Integer
  '   Dim sValues As String

  ' For Each iValue In Values
  '   sValues &= iValue & " "
  ' Next
  ' Debug sValues

  For iRow = 0 To $hGameDef.Rows.Max
    hGameRow = $hGameDef.Rows[iRow]

    If hGameRow.Formula Then
      iScore = MFormulaParser.ParseFormula(Values, hGameRow)
      aScores[iRow] = iScore
    Endif
  Next

  Return aScores

End

Private Function Undoable_Read() As Boolean

  Return $bUndoable

End

Private Sub Undoable_Write(Value As Boolean)

  $bUndoable = Value

End

' Private Function Rollable_Read() As Boolean
'
'   Return $bRollable
'
' End
'
' Private Sub Rollable_Write(Value As Boolean)
'
'   $bRollable = Value
'
' End

Public Sub NewRoll()
  'TODO:         mPlayers.get(mActivePlayer).clearPreview();

  Debug

End

Private Sub Register(Row As Integer)

  Debug Row
  $hGrid.ResetLayoutByColumn($hPlayerIndex.Value + 3)
  $hCurrentPlayer.Register(Row, $aTempValues[Row])
  $aLastValues = $aTempValues.Copy()
  ActivateNextPlayer()
  $bRegisterable = False
  $bUndoable = True

  Raise Register()

End

Public Sub Undo()

  Debug
  ActivatePreviousPlayer()
  $bRegisterable = True
  $bUndoable = False
  $hCurrentPlayer.Undo()
  '$hGrid[0, 0].Picture = Picture["icon:/16/undo"]
  Raise Undo()

End