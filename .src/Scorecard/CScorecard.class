' Gambas class file

Event GameOver()
Event Undo()
Event Register()

Property Read Panel As Panel
Property Undoable As Boolean
Private $aLastValues As Integer[]
Private $aPlayers As CPlayer[]
Private $aTempValues As Integer[]
Private $aUndoPicturePath As String[] = ["images/edit-undo16_disabled.png", "images/edit-undo16_enabled.png"]

Private $bRegisterable As Boolean
Private $bUndoable As Boolean

Private $hCurrentPlayer As CPlayer
Private $hGameDef As CGameDef
Private $hGrid As CScoreGrid
Private $hLeftPanel As Panel
Private $hPanel As Panel
Private $hPlayerIndex As CCircularInt
Private $hRightPanel As Panel

Private $iLastHoveredRow As Integer = -1
Private $iNumOfRolls As Integer

Public Sub _new(hContainer As Container)

  $hPanel = New Panel(hContainer) As "Panel"

  With $hPanel
    .Arrangement = Arrange.Horizontal
    .Expand = True
  End With

End

Private Function Panel_Read() As Panel

  Return $hPanel

End

Public Sub NewGame()

  Dim i As Integer

  $hGameDef = MGameLoader.GameDefs[MSettings.GameId]
  $bRegisterable = False
  $bUndoable = False
  $iNumOfRolls = 0
  $aPlayers = New CPlayer[MSettings.Players]

  For i = 0 To $aPlayers.Max
    $aPlayers[i] = New CPlayer
    $aPlayers[i].NewGame($hGameDef)
  Next

  $hPlayerIndex = New CCircularInt(0, MSettings.Players - 1)
  $hCurrentPlayer = $aPlayers[0]

  GridInit()
  ReloadSettings()
  UpdateUndoPicture()
  InitMaxTopRolls()

End

Public Sub ReloadSettings()

  Settings.Reload()
  If Not IsNull($hGrid) Then
    With $hGrid
      .MaxCol = MSettings.ShowMaxCol
      .TopCol = MSettings.ShowTopCol
      .ApplyLayout()
      .ResetText()
      .ShowTextAsSymbols(MSettings.ShowSymbols)
      .RecalcWidth()
      Try .ShowIndicators(MSettings.ShowIndicators)
    End With
  Endif

End

Private Sub GridInit()

  Try $hLeftPanel.Delete
  Try $hGrid.Delete
  Try $hRightPanel.Delete

  $hLeftPanel = New Panel($hPanel)
  $hGrid = New CScoreGrid($hPanel, $hGameDef) As "Grid"
  $hRightPanel = New Panel($hPanel)

  $hLeftPanel.Expand = True
  $hRightPanel.Expand = True

End

Public Sub Grid_Click()

  Dim hGameRow As CGameRow
  Dim iRow As Integer = $hGrid.Row
  Dim iCol As Integer = $hGrid.Column

  If $bUndoable And iRow = 0 And iCol = 0 Then
    Undo()
  Endif

  If $bRegisterable And iCol = $hPlayerIndex.Value + CScoreGrid.COL_OFFSET_PLAYERS Then
    hGameRow = $hGameDef.Rows[iRow]

    If hGameRow.IsPlayable And $hCurrentPlayer.Playable[iRow] Then
      Debug Subst$("hGameRow.Text &1, $aTempValues[iRow] &2", hGameRow.Text, $aTempValues[iRow])
      Register(iRow)
    Endif
  Endif

End

Public Sub Grid_Leave()

  If $iLastHoveredRow <> -1 Then
    $hGrid.ResetColumnLayout(0)
    $hGrid.ResetColumnLayout(1)
    $hGrid.ResetColumnLayout(2)
    $hGrid.ResetColumnLayout($hPlayerIndex.Value + CScoreGrid.COL_OFFSET_PLAYERS)
    Try $hGrid.ShowIndicators(MSettings.ShowIndicators)
    $iLastHoveredRow = -1
  Endif

End

Public Sub Grid_MouseMove()

  Dim iCol As Integer = $hGrid.ColumnAt(Mouse.X)
  Dim iRow As Integer = $hGrid.RowAt(Mouse.Y)
  Dim iPlayerColumn As Integer = $hPlayerIndex.Value + CScoreGrid.COL_OFFSET_PLAYERS

  If iRow <> $iLastHoveredRow And iRow > 0 And If iRow < $hGameDef.Rows.Count And If iPlayerColumn = iCol Then
    $hGrid.HoverRow(iRow, iPlayerColumn, $hCurrentPlayer.Playable[iRow])
    $iLastHoveredRow = iRow
  Else If iPlayerColumn <> iCol
    Grid_Leave()
  Endif

End

Public Sub RollFinished(aValues As Integer[])

  Dim sRolls As String

  Inc $iNumOfRolls
  $hCurrentPlayer.Rolls = $hCurrentPlayer.Rolls + 1
  sRolls = Subst("&1 (&2/&3)", $hCurrentPlayer.Rolls, $iNumOfRolls, $hGameDef.Rolls)

  $hGrid.SetPlayerRolls($hPlayerIndex.Value, sRolls)

  $aTempValues = CalculatePossibleScores(aValues)
  $hGrid.SetTempData($hPlayerIndex, $hCurrentPlayer, $aTempValues)
  $hGrid.ShowIndicators(MSettings.ShowIndicators)

  $bRegisterable = True

End

Private Function CalculatePossibleScores(Values As Integer[]) As Integer[]

  Dim aScores As New Integer[$hGameDef.Rows.Length]
  Dim hGameRow As CGameRow
  Dim iRow As Integer
  Dim iScore As Integer
  '   Dim iValue As Integer
  '   Dim sValues As String

  ' For Each iValue In Values
  '   sValues &= iValue & " "
  ' Next
  ' Debug sValues

  For iRow = 0 To $hGameDef.Rows.Max
    hGameRow = $hGameDef.Rows[iRow]

    If hGameRow.Formula Then
      iScore = MFormulaParser.ParseFormula(Values, hGameRow)
      aScores[iRow] = iScore
    Endif
  Next

  Return aScores

End

Private Function Undoable_Read() As Boolean

  Return $bUndoable

End

Private Sub Undoable_Write(Value As Boolean)

  $bUndoable = Value

End

Public Sub NewRoll()

  $hGrid.ClearPreview()
  UpdateUndoPicture()

End

Private Sub Register(Row As Integer)

  Debug Row, $aTempValues[Row]

  $aLastValues = $aTempValues.Copy()
  $hCurrentPlayer.Register(Row, $aTempValues[Row])
  $hGrid.Register(Row)

  'TODO: Move to Grid.Register
  $hGrid.SetPlayerRolls($hPlayerIndex.Value, $hCurrentPlayer.Rolls)
  $hCurrentPlayer = $aPlayers[$hPlayerIndex.Inc()]
  $hGrid.SetCurrentPlayer($hCurrentPlayer)
  $hGrid.ResetColumnLayout($hPlayerIndex.Value + CScoreGrid.COL_OFFSET_PLAYERS)
  $hGrid.ResetColumnLayout($hPlayerIndex.PeekPrev() + CScoreGrid.COL_OFFSET_PLAYERS)

  $iNumOfRolls = 0

  $bRegisterable = False
  $bUndoable = True
  UpdateUndoPicture()

  Grid_Leave()

  Raise Register()

End

Public Sub Undo()

  Dim iUndoRow As Integer

  Debug
  $aTempValues = $aLastValues.Copy()
  $hCurrentPlayer = $aPlayers[$hPlayerIndex.Dec()]

  $hGrid.SetTempData($hPlayerIndex, $hCurrentPlayer, $aTempValues)
  iUndoRow = $hCurrentPlayer.Undo()
  $hGrid.Undo(iUndoRow)

  $bRegisterable = True
  $bUndoable = False
  UpdateUndoPicture()

  Raise Undo()

End

Private Sub UpdateUndoPicture()

  $hGrid[0, 0].Picture = Picture.Load($aUndoPicturePath[MArrays.BoolToIndex($bUndoable)])

End

Private Sub InitMaxTopRolls()

  Dim hGameRow As CGameRow
  Dim iPlayableRows As Integer

  For Each hGameRow In $hGameDef.Rows
    If hGameRow.IsPlayable Then
      Inc iPlayableRows
    Endif

  Next

  $hGrid.SetPlayerRolls(-2, iPlayableRows * $hGameDef.Rolls)
  'TODO: Read from high score
  $hGrid.SetPlayerRolls(-1, "---")

End