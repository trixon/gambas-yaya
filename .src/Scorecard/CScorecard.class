' Gambas class file

Event GameOver()
Event Undo()
Event Register()

Property Read Panel As Panel
Property Undoable As Boolean
' Property Rollable As Boolean

Private $aPlayers As CPlayerColumn[]

Private $hCurrentPlayer As CCircularInt
Private $hLeftPanel As Panel
Private $hRightPanel As Panel
Private $hPanel As Panel
Private $hGrid As CScoreGrid
Private $hGameDef As CGameDef

Private $bRegisterable As Boolean
' Private $bRollable As Boolean
Private $bUndoable As Boolean

Private $iNumOfRolls As Integer
Private $iActivePlayer As Integer

Public Sub _new(hContainer As Container)

  $hPanel = New Panel(hContainer) As "Panel"

  With $hPanel
    .Arrangement = Arrange.Horizontal
    .Expand = True
  End With

End

Private Function Panel_Read() As Panel

  Return $hPanel

End

Public Sub NewGame()

  Dim i As Integer

  $bRegisterable = False
  $bUndoable = False
  $iActivePlayer = 0
  $iNumOfRolls = 0
  $aPlayers = New CPlayerColumn[MSettings.Players]

  For i = 0 To $aPlayers.Max
    $aPlayers[i] = New CPlayerColumn
    $aPlayers[i].NewGame()
  Next

  $hCurrentPlayer = New CCircularInt(0, MSettings.Players - 1)
  '
  '        For (PlayerColumn playerColumn: mPlayers){
  '            playerColumn.newGame();
  '        }
  '
  '        mPlayers.get(mActivePlayer).setEnabled(True);
  $hGameDef = MGameLoader.GameDefs[MSettings.GameId]

  GridInit()
  Settings()

End

Public Sub Settings()

  Settings.Reload()
  If Not IsNull($hGrid) Then
    $hGrid.MaxCol = MSettings.ShowMaxCol
    $hGrid.TopCol = MSettings.ShowTopCol
    $hGrid.ApplyLayout()
    $hGrid.ShowTextAsSymbols(MSettings.ShowSymbols)
    $hGrid.RecalcWidth()
  Endif

End

Private Sub GridInit()

  Dim iMaxCol As Integer = MSettings.Players + 2
  Dim iMaxRow As Integer = $hGameDef.Rows.Count - 1

  Try $hLeftPanel.Delete
  Try $hGrid.Delete
  Try $hRightPanel.Delete

  $hLeftPanel = New Panel($hPanel)
  $hGrid = New CScoreGrid($hPanel, $hGameDef) As "Grid"
  $hRightPanel = New Panel($hPanel)

  $hLeftPanel.Expand = True
  $hRightPanel.Expand = True

End

Public Sub Grid_Click()

  Debug $hGrid.Row, $hGrid.Column
  If $hGrid.Row = 0 And $hGrid.Column = 0 Then
    Raise Undo()
    Raise Register()
    Raise GameOver()
  Endif

End

Public Sub Grid_MouseMove()

  Dim iRow As Integer = $hGrid.RowAt(Mouse.Y)

  If iRow > 0 And If iRow < $hGameDef.Rows.Count Then
    $hGrid.HoverRow(iRow)

  Endif

End

Private Function GenerateRollsIndicator() As String

  Return Subst("&1 (&2/&3)", $iNumOfRolls, $aPlayers[$iActivePlayer].Rolls, $hGameDef.Rolls)

End

Public Sub ParseDice(aValues As Integer[])

  Dim iValue As Integer
  Dim hGameRow As CGameRow

  $bRegisterable = True
  Inc $iNumOfRolls
  $aPlayers[$iActivePlayer].Rolls = $aPlayers[$iActivePlayer].Rolls + 1
  $hGrid.UpdateRolls($iActivePlayer, GenerateRollsIndicator())
  ' mPlayers.get(mActivePlayer).parse(values);
  '
  ' mPlayers.get(mActivePlayer).setVisibleIndicators(mOptions.isShowingIndicators());

  For Each iValue In aValues
    Print iValue;;
  Next
  Print

  For Each hGameRow In $hGameDef.Rows
    If hGameRow.Formula Then
      MFormulaParser.ParseFormula(aValues, hGameRow)
    Endif
  Next

End

Private Function Undoable_Read() As Boolean

  Return $bUndoable

End

Private Sub Undoable_Write(Value As Boolean)

  $bUndoable = Value

End

' Private Function Rollable_Read() As Boolean
'
'   Return $bRollable
'
' End
'
' Private Sub Rollable_Write(Value As Boolean)
'
'   $bRollable = Value
'
' End

Public Sub NewRoll()
  'TODO:         mPlayers.get(mActivePlayer).clearPreview();

  Debug

End
