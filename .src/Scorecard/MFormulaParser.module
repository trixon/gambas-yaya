' Gambas module file

Private $aValues As Integer[]
Private $aArguments As New Variant[]
Private $hGameRow As CGameRow

Public Function ParseFormula(aValues As Integer[], hGameRow As CGameRow) As Integer

  Dim i As Integer
  Dim iResult As Integer = -1
  Dim aParseString As String[]
  Dim sCommand As String

  $aValues = aValues
  $hGameRow = hGameRow
  aParseString = Split(hGameRow.Formula, " ")
  sCommand = aParseString[0]

  $aArguments.Clear
  'Print $hGameRow.Text, $hGameRow.Formula;;

  For i = 1 To aParseString.Max
    $aArguments.Add(aParseString[i])
  Next

  Select String.UCase(sCommand)
    Case "CRAG"
      iResult = CalcCrag()
    Case "DUPLICATES"
      iResult = CalcDuplicates($aArguments[0])
    Case "EQUALS"
      iResult = CalcEquals()
    Case "HOUSE"
      iResult = CalcHouse($aArguments[0], $aArguments[1])
    Case "PAIR"
      iResult = CalcPair($aArguments[0])
    Case "SEQUENCE"
      iResult = CalcSequence($aArguments[0])
    Case "STRAIGHT"
      iResult = CalcStraight($aArguments[0])
    Case "SUM"
      iResult = CalcSum()
    Case "SUM_N"
      iResult = CalcSumN($aArguments[0])
    Default
      Debug "Unknown command: " & sCommand
  End Select

  'Print iResult

  Return iResult

End

Private Function CalcCrag() As Integer

  If CalcPair(1) And If CalcSumTotal($aValues) = 13 Then
    Return $aArguments[0]
  Else
    Return 0
  Endif

End

Private Function CalcDuplicates(iNumOfDuplicates As Integer) As Integer

  Dim i As Integer
  Dim iCount As Integer
  Dim iResult As Integer

  For i = 6 DownTo 1
    iCount = MCollections.Frequency($aValues, i)
    If iCount >= iNumOfDuplicates Then
      iResult = iNumOfDuplicates * i
      If $hGameRow.Max = $hGameRow.Lim Then
        iResult = $hGameRow.Max
      Endif
      Break
    Endif
  Next

  Return iResult

End

Private Function CalcDuplicatesFace(iNumOfDuplicates As Integer, iFace As Integer) As Integer

  Dim iResult As Integer
  Dim iFreq As Integer

  iFreq = MCollections.Frequency($aValues, iFace)
  If iFreq >= iNumOfDuplicates Then
    iResult = iNumOfDuplicates * iFace
  Endif

  Return iResult

End

Private Function CalcEquals() As Integer

  Dim aValues As Integer[]

  aValues = Split($aArguments[0], ",")

  If MCollections.Equals(aValues, $aValues) Then
    Return $aArguments[1]
  Else
    Return 0
  Endif

End

Private Function CalcHouse(iFirstSetCount As Integer, iSecondSetCount As Integer) As Integer

  Dim i As Integer
  Dim iResult As Integer
  Dim aValues As Integer[]
  Dim iFreq As Integer
  Dim iFirstValue As Integer
  Dim iSecondValue As Integer

  aValues = $aValues.Copy()
  aValues.Sort

  For i = 6 DownTo 1
    iFreq = MCollections.Frequency(aValues, i)
    If iFreq >= iFirstSetCount Then
      iFirstValue = i
      aValues.Remove(aValues.Find(i), iFreq)
      Break
    Endif
  Next

  If iFirstValue > 0 Then
    For i = 6 DownTo 1
      iFreq = MCollections.Frequency(aValues, i)
      If iFreq >= iSecondSetCount Then
        iSecondValue = i
        Break
      Endif
    Next
  Endif

  If iFirstValue > 0 And If iSecondValue > 0 Then
    If $hGameRow.Lim = $hGameRow.Max Then
      iResult = $hGameRow.Max
    Else
      iResult = iFirstSetCount * iFirstValue + iSecondSetCount * iSecondValue
    Endif
  Endif

  Return iResult

End

Private Function CalcPair(iNumOfPairs As Integer) As Integer

  Dim iResult As Integer
  Dim i As Integer
  Dim j As Integer
  Dim iPairCounter As Integer
  Dim iStartFace As Integer = 6
  Dim iPairSum As Integer

  For i = 0 To iNumOfPairs
    For j = iStartFace DownTo 1
      iPairSum = CalcDuplicatesFace(2, j)
      If iPairSum > 0 Then
        iResult += iPairSum
        Inc iPairCounter
        iStartFace = j - 1
        Break
      Endif
    Next
  Next

  If iPairCounter < iNumOfPairs Then
    iResult = 0
  Endif

  Return iResult

End

Private Function CalcSequence(iSizeOfSequence As Integer) As Integer

  Dim iResult As Integer
  Dim aSequence As Integer[]

  aSequence = MCollections.FindLargestSequence($aValues)

  If aSequence.Length >= iSizeOfSequence Then
    If $aArguments.Length > 3 Then
      iResult = $aArguments[3]
    Else
      iResult = CalcSumTotal(aSequence)
    Endif
  Endif

  Return iResult

End

Private Function CalcStraight(iSizeOfStraight As Integer) As Integer

  Dim i As Integer
  Dim iResult As Integer
  Dim aUniqueValues As New Integer[]
  Dim iSetSum As Integer

  For i = 0 To $aValues.Max
    If Not aUniqueValues.Exist($aValues[i]) Then
      aUniqueValues.Add($aValues[i])
    Endif
  Next

  If aUniqueValues.Length >= iSizeOfStraight Then
    For i = 0 To aUniqueValues.Max
      iSetSum += aUniqueValues[i]
    Next

    If aUniqueValues.Length > iSizeOfStraight Then
      If iSetSum >= $hGameRow.Lim Then
        iResult = $hGameRow.Max
      Endif
    Else
      If iSetSum = $hGameRow.Lim Then
        iResult = $hGameRow.Max
      Endif
    Endif
  Endif

  Return iResult

End

Private Function CalcSum() As Integer

  Dim iSum As Integer = CalcSumTotal($aValues)

  If $aArguments.Length = 0 Then
    Return iSum
  Else If $aArguments.Length = 1
    Return CalcSumOf($aArguments[0])
  Else If $aArguments.Length = 2 And If iSum = $aArguments[0]
    Return $aArguments[1]
  Else
    Return -1
  Endif

End

Private Function CalcSumN(iNumOfDuplicates As Integer) As Integer

  Dim i As Integer
  Dim iFreq As Integer

  For i = 1 To 6
    iFreq = Max(iFreq, MCollections.Frequency($aValues, i))
  Next

  If iFreq >= iNumOfDuplicates Then
    Return CalcSumTotal($aValues)
  Else
    Return 0
  Endif

End

Private Function CalcSumOf(iFace As Integer) As Integer

  Return iFace * MCollections.Frequency($aValues, iFace)

End

Private Function CalcSumTotal(aValues As Integer[]) As Integer

  Dim iResult As Integer
  Dim iItem As Integer

  For Each iItem In aValues
    iResult += iItem
  Next

  Return iResult

End
