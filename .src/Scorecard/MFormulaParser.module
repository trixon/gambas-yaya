' Gambas module file

Private $aValues As Integer[]
Private $aArgList As New Integer[]
Private $hGameRow As CGameRow

Public Function ParseFormula(aValues As Integer[], hGameRow As CGameRow) As Integer

  Dim i As Integer
  Dim iResult As Integer = -1
  Dim aParseString As String[]
  Dim sCommand As String

  $aValues = aValues
  $hGameRow = hGameRow
  aParseString = Split(hGameRow.Formula, " ")
  sCommand = aParseString[0]

  $aArgList.Clear
  Print $hGameRow.Text, $hGameRow.Formula;;

  For i = 1 To aParseString.Max
    $aArgList.Add(CInt(aParseString[i]))
    'Print $aArgList[$aArgList.Length - 1]
  Next

  Select String.UCase(sCommand)
    Case "DUPLICATES"
      iResult = CalcDuplicates($aArgList[0])
    Case "HOUSE"
    Case "PAIR"
      iResult = CalcPair($aArgList[0])
    Case "STRAIGHT"
      iResult = CalcStraight($aArgList[0])
    Case "SUM"
      iResult = CalcSum()
    Default
      Debug "Unknown command: " & sCommand
  End Select

  Print iResult

  Return iResult

End

Private Function CalcDuplicates(iNumOfDuplicates As Integer) As Integer

  Dim i As Integer
  Dim iCount As Integer
  Dim iResult As Integer

  For i = 6 DownTo 1
    iCount = MCollections.Frequency($aValues, i)
    If iCount >= iNumOfDuplicates Then
      iResult = iNumOfDuplicates * i
      If $hGameRow.Max = $hGameRow.Lim Then
        iResult = $hGameRow.Max
      Endif
      Break
    Endif
  Next

  Return iResult

End

Private Function CalcDuplicatesFace(iNumOfDuplicates As Integer, iFace As Integer) As Integer

  Dim i As Integer
  Dim iCount As Integer
  Dim iResult As Integer
  Dim iFreq As Integer

  iFreq = MCollections.Frequency($aValues, iFace)
  If iFreq >= iNumOfDuplicates Then
    iResult = iNumOfDuplicates * iFace
  Endif

  Return iResult

End

Private Function CalcPair(iNumOfPairs As Integer) As Integer

  Dim iResult As Integer
  Dim i As Integer
  Dim j As Integer
  Dim iPairCounter As Integer
  Dim iStartFace As Integer = 6
  Dim iPairSum As Integer

  For i = 0 To iNumOfPairs
    For j = iStartFace DownTo 1
      iPairSum = CalcDuplicatesFace(2, j)
      If iPairSum > 0 Then
        iResult += iPairSum
        Inc iPairCounter
        iStartFace = j - 1
        Break
      Endif
    Next
  Next

  If iPairCounter < iNumOfPairs Then
    iResult = 0
  Endif

  Return iResult

End

Private Function CalcStraight(iSizeOfStraight As Integer) As Integer

  Dim i As Integer
  Dim iFace As Integer
  Dim iResult As Integer
  Dim aSortedSet As New Integer[]
  Dim iSetSum As Integer

  For Each iFace In $aValues
    If aSortedSet.Exist(iFace) = 0 Then
      aSortedSet.Add(iFace)
    Endif
  Next

  If aSortedSet.Length >= iSizeOfStraight Then
    For i = 0 To aSortedSet.Max
      iSetSum += aSortedSet[i]
    Next

    If aSortedSet.Length > iSizeOfStraight Then
      If iSetSum >= $hGameRow.Lim Then
        iResult = $hGameRow.Max
      Endif
    Else
      If iSetSum = $hGameRow.Lim Then
        iResult = $hGameRow.Max
      Endif

    Endif
  Endif

  Return iResult

End

Private Function CalcSum() As Integer

  If $aArgList.Length = 0 Then
    Return CalcSumTotal()
  Else
    Return CalcSumOf($aArgList[0])
  Endif

End

Private Function CalcSumTotal() As Integer

  Dim iResult As Integer
  Dim iItem As Integer

  For Each iItem In $aValues
    iResult += iItem
  Next

  Return iResult

End

Private Function CalcSumOf(iFace As Integer) As Integer

  Return iFace * MCollections.Frequency($aValues, iFace)

End
