' Gambas module file

Property Players As Integer
Property ReverseMouseScroll As Boolean
Property GameId As String
Property {Variant} As Integer
Property ShowHints As Boolean
Property ShowMaxCol As Boolean
Property ShowTopCol As Boolean
Property PlayerNames As String[]
Property PlayerSelection As String[]
Property ShowSymbols As Boolean
Property FullScreen As Boolean

Private Const KEY_GAME_PLAYERS As String = "Game/Players"
Private Const KEY_REVERSE_MOUSE_SCROLL As String = "ReverseMouseScroll"
Private Const KEY_GAME_ID As String = "Game/Id"
Private Const KEY_GAME_VARIANT As String = "Game/Variant"
Private Const KEY_SCORECARD_SHOW_HINTS As String = "Scorecard/ShowHints"
Private Const KEY_SCORECARD_SHOW_MAXCOL As String = "Scorecard/ShowMax"
Private Const KEY_SCORECARD_SHOW_SYMBOLS As String = "Scorecard/ShowSymbols"
Private Const KEY_SCORECARD_SHOW_TOPCOL As String = "Scorecard/ShowTop"
Private Const KEY_PLAYER_NAMES As String = "Players"
Private Const KEY_PLAYER_SELECTION As String = "Game/PlayerSelection"
Private Const KEY_FULL_SCREEN As String = "Window/FullScreen"

Private Function Players_Read() As Integer

  Return Settings[KEY_GAME_PLAYERS, 2]

End

Private Sub Players_Write(Value As Integer)

  Settings[KEY_GAME_PLAYERS] = Value

End

Private Function ReverseMouseScroll_Read() As Boolean

  Return Settings[KEY_REVERSE_MOUSE_SCROLL, False]

End

Private Sub ReverseMouseScroll_Write(Value As Boolean)

  DicePanel.ReverseMouseScroll = Value
  Settings[KEY_REVERSE_MOUSE_SCROLL] = Value

End

Private Function GameId_Read() As String

  Return Settings[KEY_GAME_ID, "default"]

End

Private Sub GameId_Write(Value As String)

  Settings[KEY_GAME_ID] = Value

End

Private Function ShowHints_Read() As Boolean

  Return Settings[KEY_SCORECARD_SHOW_HINTS, True]

End

Private Sub ShowHints_Write(Value As Boolean)

  Settings[KEY_SCORECARD_SHOW_HINTS] = Value

End

Private Function ShowMaxCol_Read() As Boolean

  Return Settings[KEY_SCORECARD_SHOW_MAXCOL, True]

End

Private Sub ShowMaxCol_Write(Value As Boolean)

  Settings[KEY_SCORECARD_SHOW_MAXCOL] = Value

End

Private Function ShowTopCol_Read() As Boolean

  Return Settings[KEY_SCORECARD_SHOW_TOPCOL, True]

End

Private Sub ShowTopCol_Write(Value As Boolean)

  Settings[KEY_SCORECARD_SHOW_TOPCOL] = Value

End

Private Function PlayerNames_Read() As String[]

  Return LoadStringArray(KEY_PLAYER_NAMES)

End

Private Sub PlayerNames_Write(Value As String[])

  SaveStringArray(KEY_PLAYER_NAMES, Value)

End

Private Function PlayerSelection_Read() As String[]

  Return LoadStringArray(KEY_PLAYER_SELECTION)

End

Private Sub PlayerSelection_Write(Value As String[])

  SaveStringArray(KEY_PLAYER_SELECTION, Value)

End

Private Function LoadStringArray(sKey As String) As String[]

  Dim sNames As String = Settings[sKey]

  If sNames Then
    Return Split(sNames, "|", "", True, False)
  Else
    Return New String[]
  Endif

End

Private Sub SaveStringArray(sKey As String, Value As String[])

  Dim sName As String
  Dim sNames As String

  For Each sName In Value
    sNames = sNames & "|" & sName
  Next

  Settings[sKey] = String.Right(sNames, -1)

End

Private Function Variant_Read() As Integer

  Return Settings[KEY_GAME_VARIANT, 0]

End

Private Sub Variant_Write(Value As Integer)

  Settings[KEY_GAME_VARIANT] = Value

End

Private Function ShowSymbols_Read() As Boolean

  Return Settings[KEY_SCORECARD_SHOW_SYMBOLS, False]

End

Private Sub ShowSymbols_Write(Value As Boolean)

  Settings[KEY_SCORECARD_SHOW_SYMBOLS] = Value

End

Private Function FullScreen_Read() As Boolean

  Return Settings[KEY_FULL_SCREEN, False]

End

Private Sub FullScreen_Write(Value As Boolean)

  Settings[KEY_FULL_SCREEN] = Value

End
